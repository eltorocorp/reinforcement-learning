// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eltorocorp/reinforcement-learning/pkg/qlearning/iface (interfaces: Stater,Actioner,ActionStatter)

// Package agent is a generated GoMock package.
package agent

import (
	iface "github.com/eltorocorp/reinforcement-learning/pkg/qlearning/iface"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStater is a mock of Stater interface
type MockStater struct {
	ctrl     *gomock.Controller
	recorder *MockStaterMockRecorder
}

// MockStaterMockRecorder is the mock recorder for MockStater
type MockStaterMockRecorder struct {
	mock *MockStater
}

// NewMockStater creates a new mock instance
func NewMockStater(ctrl *gomock.Controller) *MockStater {
	mock := &MockStater{ctrl: ctrl}
	mock.recorder = &MockStaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStater) EXPECT() *MockStaterMockRecorder {
	return m.recorder
}

// ActionIsCompatible mocks base method
func (m *MockStater) ActionIsCompatible(arg0 iface.Actioner) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionIsCompatible", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ActionIsCompatible indicates an expected call of ActionIsCompatible
func (mr *MockStaterMockRecorder) ActionIsCompatible(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionIsCompatible", reflect.TypeOf((*MockStater)(nil).ActionIsCompatible), arg0)
}

// Apply mocks base method
func (m *MockStater) Apply(arg0 iface.Actioner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply
func (mr *MockStaterMockRecorder) Apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockStater)(nil).Apply), arg0)
}

// GetAction mocks base method
func (m *MockStater) GetAction(arg0 string) (iface.Actioner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAction", arg0)
	ret0, _ := ret[0].(iface.Actioner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAction indicates an expected call of GetAction
func (mr *MockStaterMockRecorder) GetAction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAction", reflect.TypeOf((*MockStater)(nil).GetAction), arg0)
}

// ID mocks base method
func (m *MockStater) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockStaterMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockStater)(nil).ID))
}

// PossibleActions mocks base method
func (m *MockStater) PossibleActions() []iface.Actioner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PossibleActions")
	ret0, _ := ret[0].([]iface.Actioner)
	return ret0
}

// PossibleActions indicates an expected call of PossibleActions
func (mr *MockStaterMockRecorder) PossibleActions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PossibleActions", reflect.TypeOf((*MockStater)(nil).PossibleActions))
}

// MockActioner is a mock of Actioner interface
type MockActioner struct {
	ctrl     *gomock.Controller
	recorder *MockActionerMockRecorder
}

// MockActionerMockRecorder is the mock recorder for MockActioner
type MockActionerMockRecorder struct {
	mock *MockActioner
}

// NewMockActioner creates a new mock instance
func NewMockActioner(ctrl *gomock.Controller) *MockActioner {
	mock := &MockActioner{ctrl: ctrl}
	mock.recorder = &MockActionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActioner) EXPECT() *MockActionerMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockActioner) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockActionerMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockActioner)(nil).ID))
}

// MockActionStatter is a mock of ActionStatter interface
type MockActionStatter struct {
	ctrl     *gomock.Controller
	recorder *MockActionStatterMockRecorder
}

// MockActionStatterMockRecorder is the mock recorder for MockActionStatter
type MockActionStatterMockRecorder struct {
	mock *MockActionStatter
}

// NewMockActionStatter creates a new mock instance
func NewMockActionStatter(ctrl *gomock.Controller) *MockActionStatter {
	mock := &MockActionStatter{ctrl: ctrl}
	mock.recorder = &MockActionStatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockActionStatter) EXPECT() *MockActionStatterMockRecorder {
	return m.recorder
}

// Calls mocks base method
func (m *MockActionStatter) Calls() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calls")
	ret0, _ := ret[0].(int)
	return ret0
}

// Calls indicates an expected call of Calls
func (mr *MockActionStatterMockRecorder) Calls() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calls", reflect.TypeOf((*MockActionStatter)(nil).Calls))
}

// QValueRaw mocks base method
func (m *MockActionStatter) QValueRaw() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QValueRaw")
	ret0, _ := ret[0].(float64)
	return ret0
}

// QValueRaw indicates an expected call of QValueRaw
func (mr *MockActionStatterMockRecorder) QValueRaw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QValueRaw", reflect.TypeOf((*MockActionStatter)(nil).QValueRaw))
}

// QValueWeighted mocks base method
func (m *MockActionStatter) QValueWeighted() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QValueWeighted")
	ret0, _ := ret[0].(float64)
	return ret0
}

// QValueWeighted indicates an expected call of QValueWeighted
func (mr *MockActionStatterMockRecorder) QValueWeighted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QValueWeighted", reflect.TypeOf((*MockActionStatter)(nil).QValueWeighted))
}

// SetCalls mocks base method
func (m *MockActionStatter) SetCalls(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCalls", arg0)
}

// SetCalls indicates an expected call of SetCalls
func (mr *MockActionStatterMockRecorder) SetCalls(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCalls", reflect.TypeOf((*MockActionStatter)(nil).SetCalls), arg0)
}

// SetQValueRaw mocks base method
func (m *MockActionStatter) SetQValueRaw(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetQValueRaw", arg0)
}

// SetQValueRaw indicates an expected call of SetQValueRaw
func (mr *MockActionStatterMockRecorder) SetQValueRaw(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQValueRaw", reflect.TypeOf((*MockActionStatter)(nil).SetQValueRaw), arg0)
}

// SetQValueWeighted mocks base method
func (m *MockActionStatter) SetQValueWeighted(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetQValueWeighted", arg0)
}

// SetQValueWeighted indicates an expected call of SetQValueWeighted
func (mr *MockActionStatterMockRecorder) SetQValueWeighted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetQValueWeighted", reflect.TypeOf((*MockActionStatter)(nil).SetQValueWeighted), arg0)
}
